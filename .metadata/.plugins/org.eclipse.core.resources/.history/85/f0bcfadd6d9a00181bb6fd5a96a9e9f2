/*
 * usr.c
 *
 *  Created on: 05 Aug 2018
 *      Author: 18225713
 */
#include "usr.h"


/*
 * main.c initialisation
 */
void usr_init(TIM_HandleTypeDef *htim2, TIM_HandleTypeDef *htim6)
{
	uint8_t i;

  servo_pin_port[0] = SERVO_1_CTRL_GPIO_Port;
  servo_pin_number[0] = SERVO_1_CTRL_Pin;
  servo_pin_port[1] = SERVO_2_CTRL_GPIO_Port;
  servo_pin_number[1] = SERVO_2_CTRL_Pin;

  //tim2 init
  __HAL_TIM_ENABLE(htim2);
  HAL_TIM_PWM_Init(htim2);
  for (i = 0; i < NUMBER_SERVOS; ++i)
  {
	  servo_pulse_width[i] = get_pulse_width(0);
	  __HAL_TIM_SET_COMPARE(htim2, 4*i, 0);
  }
  HAL_TIM_PWM_Start_IT(htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start_IT(htim2, TIM_CHANNEL_2);

  return;
}

/*
 * main.c infinite loop
 */
void usr_process(TIM_HandleTypeDef *htim2)
{
	uint8_t i;

	if (gf_BTN_PRESS)
	{
		for (i = 0; i < NUMBER_SERVOS; ++i)
		{
			if (servo_angle[i] < ANGLE_MAX)
			{
				set_servo_angle(servo_angle[i]+30, i);
			} else
			{
				set_servo_angle(0, i);
			}

			__HAL_TIM_SET_COMPARE(htim2, 4*i, servo_pulse_width[i]);
		}



		gf_BTN_PRESS = 0;
	}

	return;
}

/*
 * updates all servo PWM signals every tick
 */
void servo_tick(void )
{

	return;
}

/*
 * sets servo control pin output state
 */
void set_servo_control_pin_state(uint8_t servo_number)
{

}


/*
 * sets pulse width to number of pulses required for desired angle
 * store angle set
 */
void set_servo_angle(uint16_t angle, uint8_t servo_number)
{
	servo_angle[servo_number] = angle;
	servo_pulse_width[servo_number] = get_pulse_width(angle);


	return;
}

/*
 * converts desired angle to pulse width required
 */
uint32_t get_pulse_width(uint16_t angle)
{
	return 10*angle + 900;
}
